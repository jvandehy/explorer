This is the explorer journal volume 1

1 General
1.1 What is this journal?
1.2 Entries

2 Vim 

2.1 Vim Introduction
2.2 The Vim Book
2.2.0 Citation
2.2.1 Basic Editing
2.2.2 Editing a Little Faster

3 Go Programming Language Go Programming Language

3.1 Introducing Go
3.1.0 Citation
3.1.1 Getting Started (Chapter 1)
3.1.2 Types (Chapter 2)
3.1.3 Variables (Chapter 3)

3.2 Learn How to Code Google's Go Programming Language
3.2.1 Course Overview
3.2.2 Variables Values & Type

4 Science Journal
4.1 Neuroscience
4.2 Immunology

1.1  What is this journal? 
	This is a journal for me to track ideas I get while I am in exploring mode.
	I think writing helps me learn and "explore". A side benefit, at least initally is that I am writing this using the Vim editor, and I hope that using Vim will help me learn its features. I am also trying to do the keyboarding without looking at the keyboard. 
1.2 Entries 
	1.2.1 September 28, 2017: Today I mostly developed the idea of the explorer journal. I added the Vim section and it's Introduction.
	1.2.2 September 30, 2017: Today I am adding the "Entries" Section. Added Basic Editing section of Vim Book. 
	1.2.3 October 1, 2017: More Vim Book entries - movements.
	1.2.4 October 2, 2017: more movement procedures in vim
	1.2.5 October 4, 2017: Neurology Article.
	1.2.6 October 5, 2017: some vim editor notes
	1.2.7 October 6, 2017: vim editor notes
	1.2.8 October 9, 2017: vim first then ....
	1.2.9 October 10, 2017: review vim
	1.2.10 October 14, 2017: some more vim and golang
	1.2.10 October 14, 2017: some more vim and golang
	
2. Vim Editor
2.1 Introdution
	I want to learn to use the Vim editor. The process of creating this journal may help, especially if I write using Vim!
2.2 The Vim Book
	2.2.0 Oualline, Steve (2007) The Vim Tutorial and Reference a.k.a. The Vim Book
	2.2.1 Basic Editing (Chapter 1)
		"Basic Editing"	This covers the very very basics. Insert mode ("i"). Normal Mode <Esc>. Left h; Down j; Up k; Right l.
		I liked the comment "Moving the curser is the most common thing you do in an editor, and those keys are in the home row of the right hand."
		x deletes; u undo; CTRL-r is "redo";U undo line; ZZ write and exit; :quit or :q to quit; 
		"Sightly more complex operations". a appends; dd deletes line; o opens up a new line.
		"Help" :help for general help; CTRL-] jump to tag; CTRL-T pop tag a.k.a pop a tag off the tag stack;:help subject (where subject could be any subject, e.g. deleting);
		"Help Special Prefixes"
			What			Prefix		Example
			Normal Mode Commands	(nothing) 	:help x
			Control Character	CTRL-		:help CTRL-u
			Visual Mode Commands	v_		:help v_d
			Insert Mode Commands	i_		:help i_<Esc>
			ex Mode Commands	:		:help :quit
			Command Line edit       c_		:help c_<Del> 
			Vim command arguments   -		:help -r
			Options			`(both ends)	:help `nowrap`
			Special Keys		enclosed in angle brackets	:help <Up>
		Using "Count" examples: 9k, 3a!, 3x
	2.2.2 Editing a Little Faster
		Move one word further w; Move one word back b; Move to end of line $;Move to first charater of line <Home>; 
		Move to first "nonblank" charactor of a line 0; Move to the first "nonblank" character of the line ^; 
		Move to next letter "n" fn; Move to previous letter "n" F; Move to line "n" nG;	Move to "n" % of the file n%;
		"Search f vs Search 'til t" the tx (search 'til) command works like the fx commmand, except it stops one charactor before the indicated charactor.
		"Where are you in a file?"
			:set number - turns on line numbering;:set nonumber - turns off line numbering.
			CTRl-G displays a status line	
		"Scrolling Up and Down" 
			CTRL-U scrolls up a half screen; CTRL-D scrolls down a half screen;
		Visual Mode - Start Visual Mode with v.
		"Deleting Text in Visual Mode"a.k.a 'v<move>d'. Use v to get into visual mode, then curser movements to select, and d to delete.
		This is a good time to practice deletions! It works!
		"Deleting Text Without Visual Mode a.k.a 'dmotion' " example delete word is dw; delete three words d3w or 3dw.
		Changing Text and ending in Normal mode d; Changing Text and endins in Insert Mode c.
		This is a good place to practice with the c command.
		"Deleting Lines and ending in Normal mode dd";"Deleting lines and ending in Insert mode cc";
		"Delete to the end of the line": c$; or d$
		"The . command" repeats the last delete or change command.
		"Joining Lines in Visual Mode" start in visual mode, highlight the lines you wish to join, then J
		"Joining Lines in Normal Mode" J; 
			Practice joining	 "alpha subunit" -
						"beta subunit" 
		"Replacing Characters" r(char) replaces the charactor under the cursor with (char); 
		"Changing Case" ~ is for changing case; example of count with ~ is 10~.
		"Marcos" "Keyboard Macros"

3 Go Programming Language
3.1 Introducing Go
3.1.0 Doxsey, Caleb (2016) Introducing Go
3.1.1 Getting Started (Chapter) 1 notes
	Most of Chapter 1 is so basic that I don't feel a need to make too many notes.
3.1.2 Types (Chapter) 2 notes
	"Built-in Types" Numbers, Strings,Boooleans.
	"Numbers"
		"Bits, Bytes, Runes"
			1 byte = 8 bits a.k.a uint8
			1 rune = 32 bits a.k.a uint32	
	"Strings"
		"a string is a sequence of characters"
		"strings are made up of individual bytes"
		"String Literals"
			"Double quotes vs back-ticks"				
				"Double quoted strings cannot contain newlines AND they allow escape sequences"
				"Escape sequences" Examples \n \t for new line and tab.
		len() finds lenght of string; access character at nth index position of generic_string with generic_string[n];
		concatenate two strings with + operator.
	"Booleans"
		boolean value is special 1-bit integer type
		used to represent true and false (or on and off)
		logical operators
			&& and
			|| or
			!  not
3.1.3 Variables
	a variable is a storage location
	a variable is a storage location
	a variable is a storage location
	varible declaration
		var x string
	assignment of vaule to variable
		x = "cat litter"
	= symbol read as " x is assigned the string "cat litter"
	the right side of the = is done first and the result is then assigned to the left side of  the =
		alternate assignment forms
			+=  example x += y  is same as x = x + y
			-=
			*=
			/=
			%=
	declartion and assigment (short form)
		x := "bad cat"; no type is required
	scope is the range of places where you are allowed to use a variable.

3.2 McCloud, Todd (2017) Learn How to Code Google's Go Programming Language Course Outline
3.2.1 Course Overviev
3.2.2 Variables Values & Type
	variadic parameters  	( ...<some type>) is how variadic paramenters are signified
	interface		the type "interface{}" is the empty interface
				everything is of type "interface{}"
				so the parameter "...interface{}" means give me as many arguments of any type as you'd like			
	package notation 	package.Identifier (example fmt.Println()) "from the package fmt I am using he Printlin func"
	Identifier		is name of variable, constant, func et cetera.
	
4 Science
4.1 Neuroscience	
4.1.1 Preston, Stephanie (2017) "The Rewarding Nature of Social Contact", Science 357, Issue 6358, pg 1353 +
	- How is the pleasure of social interaction hardwired into the brain?
	- New research in mice elucidates neural mechanisims underlying social interactions.
4.2 Immunology
4.1.1 Stubbington, Michael J et all (2017), "Single-cell transcriptomics to explore the immune system in health and disease" Science 358, Vol 6359 pg 58+
	- 
